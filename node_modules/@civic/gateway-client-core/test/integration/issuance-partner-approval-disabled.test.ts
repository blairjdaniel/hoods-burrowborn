import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';
import { GatekeeperAPIStatus } from '../../src/types/gatekeeperApi';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore issuance partner approval disabled integration tests', () => {
  let testHelpers: IntegrationTestHelpers;
  const gkPostResponse = {
    presentationRequestId: 'b172e3fd-61b0-4af9-b158-05f087ecbb4d',
    status: GatekeeperAPIStatus.REQUESTED,
  };
  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox, { clientSends: false });
    testHelpers.stubSuccessfulFetchCalls({
      postResponsePayload: gkPostResponse,
      payer: null,
    });
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  afterEach(() => {
    testHelpers.expectFlowIdToBeSet('GWRC_issuance_');
  });

  step('1. expect the Gatekeeper client to successfully initialize', async () => {
    testHelpers.initializeGatewayCore();
    // wait for GK and on-chain checks to complete
    await sleep(110);
  });

  step('2. Expect gateway status to change to NOT_REQUESTED', async () => {
    testHelpers.expectNotRequested();
  });

  step('3. Expect successful civic-sign public-key, did and POWO flows', async () => {
    await testHelpers.expectSuccessfulCivicSignProofFlow();
  });

  step('4. Simulate an in progress iframe event', async () => {
    testHelpers.simulateCivicPassInProgressEvent();
  });

  step('5. Emit a civic-pass event to initiate the GK-API issuance request', async () => {
    await testHelpers.simulateSucessfulDataCollectionTriggeringGKTokenRequest();
  });

  step('6. Prepare the GK-API polling response', async () => {
    await testHelpers.prepareGKApiPollingResponse(GatekeeperAPIStatus.REQUESTED, {
      status: GatekeeperAPIStatus.REQUESTED,
    });
  });

  step('7. Expect the status to go into IN_REVIEW', async () => {
    await testHelpers.expectCivicSendsInReview();
  });

  step('8. Once the GK-API call returns expect the status to change to parter review', async () => {
    await sleep(2000);
    testHelpers.expectPendingPresentationRequestId('b172e3fd-61b0-4af9-b158-05f087ecbb4d');
  });

  step(
    '9. OnChain listener fires with active token and gateway status and gateway token are updated to active',
    async () => {
      await testHelpers.simulateActiveOnChainToken();
      testHelpers.expectActiveToken();
    }
  );

  step('10. After token becomes active, presentationRequestId is still available in the outputs', async () => {
    await sleep(2000);
    testHelpers.expectPendingPresentationRequestId('b172e3fd-61b0-4af9-b158-05f087ecbb4d');
  });

  step('11. Expect the user to finish the flow', async () => {
    await testHelpers.simulateUserFinishedFlow();
  });
});
